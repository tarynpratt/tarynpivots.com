<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maintenance on Taryn Pratt - Pivots and other SQL fun</title>
    <link>https://tarynpivots.com/tags/maintenance/</link>
    <description>Recent content in Maintenance on Taryn Pratt - Pivots and other SQL fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 18 Dec 2020 04:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tarynpivots.com/tags/maintenance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Syncing Logins Between Availability Group Replicas</title>
      <link>https://tarynpivots.com/post/2020/syncing-logins-between-availablity-group-replicas/</link>
      <pubDate>Fri, 18 Dec 2020 04:00:00 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/2020/syncing-logins-between-availablity-group-replicas/</guid>
      <description>I mentioned this in a few previous posts, but for for those who may have missed it or forgotten, here’s a quick refresher - we use Always On Availability Groups at Stack Overflow on all of our main production servers running the network of public Q&amp;amp;A sites, Jobs, and Stack Overflow for Teams. It&amp;rsquo;s a great way to implement disaster recovery for a SQL Server environment.
Always On Availability Groups can support up to nine availability replicas, and while we don’t use anywhere near that many replicas in each of our clusters, we do have 2 replicas per cluster (3 servers total), with the replicas being used as a readable secondary.</description>
    </item>
    
    <item>
      <title>Deploying My SQL Server Maintenance Scripts</title>
      <link>https://tarynpivots.com/post/2020/deploying-my-sql-server-maintenance-scripts/</link>
      <pubDate>Fri, 16 Oct 2020 04:00:00 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/2020/deploying-my-sql-server-maintenance-scripts/</guid>
      <description>In my previous post, I listed out the tools I use with SQL Server. Some of the tools are SQL scripts that need to be deployed to each server. If you have 1-2 SQL Servers, manually deploying scripts might not be bad, but ideally you don&amp;rsquo;t want to manually deploy anything, so I wrote a little script that allow me to install the SQL scripts in my toolbox to any environment.</description>
    </item>
    
    <item>
      <title>Migrating a 40TB SQL Server Database</title>
      <link>https://tarynpivots.com/post/migrating-40tb-sql-server-database/</link>
      <pubDate>Tue, 28 Jul 2020 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/migrating-40tb-sql-server-database/</guid>
      <description>Initially, I wasn’t sure whether to write about this migration project, but when I randomly asked if people would be interested, the response was overwhelming. This was a long, kind of boring, very repetitive, and at times incredibly frustrating project, but I learned a lot, and maybe someone else will learn from this too. There may be far better ways to move this amount of data. In the path I went down, there was a huge amount of juggling that had to take place (I’ll explain that later).</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Tuple Mover Behavior Change</title>
      <link>https://tarynpivots.com/post/sql-server-2019-tuple-mover-behavior-change/</link>
      <pubDate>Mon, 20 Jul 2020 04:00:00 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/sql-server-2019-tuple-mover-behavior-change/</guid>
      <description>This is a follow-up to my post about an issue with clustered columnstore, when upgrading from SQL Server 2017 to SQL Server 2019. After extensive testing and working with support, I wanted to share some information about a change in SQL Server 2019 that might impact others.
Overview I suggest reading my other post first, it&amp;rsquo;ll only take a few minutes. I&amp;rsquo;ll wait&amp;hellip;
However, if you really don&amp;rsquo;t want to read it, here&amp;rsquo;s a quick recap on the initial issue.</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Aggressive Clustered Columnstore Cleanup</title>
      <link>https://tarynpivots.com/post/aggressive-clustered-columnstore-cleanup/</link>
      <pubDate>Fri, 24 Apr 2020 04:00:00 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/aggressive-clustered-columnstore-cleanup/</guid>
      <description>In late March 2020, we upgraded our production SQL Servers to SQL Server 2019 with CU3. After finishing the upgrade, we hit an issue with clustered columnstore that we hadn&amp;rsquo;t experienced in the previous version of SQL, SQL Server 2017. The issue also wasn&amp;rsquo;t something we encountered during our extensive testing on various servers in development, which dated back to September 2019. The problem has been mitigated, but I wanted to share our experience.</description>
    </item>
    
    <item>
      <title>A gotcha when upgrading to SQL Server 2019</title>
      <link>https://tarynpivots.com/post/system-view-gotcha-with-sql-server-2019/</link>
      <pubDate>Fri, 21 Feb 2020 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/system-view-gotcha-with-sql-server-2019/</guid>
      <description>In my last post, I mentioned that I started the process of upgrading Stack Overflow to SQL Server 2019. This week I tackled our first production servers and after upgrading, we hit a small issue aka a gotcha because we were using an old system view. Below is a recap of what I encountered.
A Little Background The servers I upgraded were the three SQL Servers that run Stack Overflow for Teams.</description>
    </item>
    
    <item>
      <title>Recovering Lost Linked Servers</title>
      <link>https://tarynpivots.com/post/recovering-lost-linked-servers/</link>
      <pubDate>Thu, 06 Feb 2020 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/recovering-lost-linked-servers/</guid>
      <description>Recently, I kicked off a project to start moving us to SQL Server 2019. During my initial review of our servers, I found quite a few (9 total) that were still running on Windows Server 2012 R2. This meant that I would need to upgrade the operating system and move us to SQL Server 2019. Having completed plenty of SQL Server upgrades, as well as operating system upgrades, I couldn&amp;rsquo;t possibly make a mistake, right?</description>
    </item>
    
    <item>
      <title>Hitting Parallel_Redo_Flow_Control waits with Availability Groups</title>
      <link>https://tarynpivots.com/post/parallel-redo-flow-control-waits-and-availability-groups/</link>
      <pubDate>Mon, 09 Dec 2019 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/parallel-redo-flow-control-waits-and-availability-groups/</guid>
      <description>In late June 2019, June 26th to be exact, we experienced an outage on Stack Overflow for about 11 minutes. It&amp;rsquo;s not unusual that we had an outage. They happen. Not often, but they do still happen. This one, however, was a little different because it was caused by a maintenance job that was running on our primary SQL Server for Stack Overflow.
The job that caused it was something I&amp;rsquo;d noticed about a month prior, but had stopped it before an actual outage occurred.</description>
    </item>
    
    <item>
      <title>How Stack Overflow upgraded from Windows Server 2012</title>
      <link>https://tarynpivots.com/post/how-stack-overflow-upgraded-from-windows-2012/</link>
      <pubDate>Thu, 18 Jul 2019 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-stack-overflow-upgraded-from-windows-2012/</guid>
      <description>Warning: This post is long. While working through this massive server upgrade/migration process, tears were shed, many cuss words were said, along with a general feeling of frustration, which ultimately culminated into extreme happiness once the migration was completed. The scale and complexity of the implementation factor into the length of this post, and I’ll share my thought process on how this was executed, so here goes.
Last year, when we upgraded to SQL Server 2017 we didn&amp;rsquo;t make any changes to the operating system on our main production servers.</description>
    </item>
    
    <item>
      <title>How we upgraded Stack Overflow to SQL Server 2017</title>
      <link>https://tarynpivots.com/post/how-we-upgraded-stackoverflow-to-sql-server-2017/</link>
      <pubDate>Wed, 07 Nov 2018 19:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-we-upgraded-stackoverflow-to-sql-server-2017/</guid>
      <description>This post has been rattling around in my head for months, and with SQL Server 2019 on the horizon, I figured I&amp;rsquo;d finally put my thoughts down, especially since I know we might hit some of the same issues when we upgrade.
A quick background, when I became the DBA at Stack Overflow, we had various versions of SQL Server in place &amp;mdash; the majority were at some level of SQL Server 2016, each with a different CU or SP installed.</description>
    </item>
    
  </channel>
</rss>