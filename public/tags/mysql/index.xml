<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on Taryn Pratt - Pivots and other SQL fun</title>
    <link>https://tarynpivots.com/tags/mysql/</link>
    <description>Recent content in mysql on Taryn Pratt - Pivots and other SQL fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Jan 2015 19:00:38 +0000</lastBuildDate><atom:link href="https://tarynpivots.com/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to rotate rows into columns in MySQL</title>
      <link>https://tarynpivots.com/post/how-to-rotate-rows-into-columns-in-mysql/</link>
      <pubDate>Sun, 18 Jan 2015 19:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-to-rotate-rows-into-columns-in-mysql/</guid>
      <description>I have answered a lot of MySQL pivot questions over on Stack Overflow and a few over on Database Administrators and have learned some things about how to transform data in MySQL.
Unfortunately, MySQL does not have PIVOT function, so in order to rotate data from rows into columns you will have to use a CASE expression along with an aggregate function.
Let&amp;rsquo;s set up some sample data.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  createtableproducts(prod_idintnotnull,prod_namevarchar(50)notnull,primarykey(prod_id));insertintoproducts(prod_id,prod\name)values(1,&amp;#39;Shoes&amp;#39;),(2,&amp;#39;Pants&amp;#39;),(3,&amp;#39;Shirt&amp;#39;);createtablereps(rep_idintnotnull,rep_namevarchar(50)notnull,primarykey(rep_id));insertintoreps(rep_id,rep_name)values(1,&amp;#39;John&amp;#39;),(2,&amp;#39;Sally&amp;#39;),(3,&amp;#39;Joe&amp;#39;),(4,&amp;#39;Bob&amp;#39;);createtablesales(prod_idINTNOTNULL,rep_idINTNOTNULL,sale_datedatetimenotnull,quantityintnotnull,PRIMARYKEY(prod_id,rep_id,sale_date),FOREIGNKEY(prod_id)REFERENCESproducts(prod_id),FOREIGNKEY(rep_id)REFERENCESreps(rep_id));insertintosales(prod_id,rep_id,sale_date,quantity)values(1,1,&amp;#39;2013-05-16&amp;#39;,20),(1,1,&amp;#39;2013-06-19&amp;#39;,2),(2,1,&amp;#39;2013-07-03&amp;#39;,5),(3,1,&amp;#39;2013-08-22&amp;#39;,27),(3,2,&amp;#39;2013-06-27&amp;#39;,500),(3,2,&amp;#39;2013-01-07&amp;#39;,150),(1,2,&amp;#39;2013-05-01&amp;#39;,89),(2,2,&amp;#39;2013-02-14&amp;#39;,23),(1,3,&amp;#39;2013-01-29&amp;#39;,19),(3,3,&amp;#39;2013-03-06&amp;#39;,13),(2,3,&amp;#39;2013-04-18&amp;#39;,1),(2,3,&amp;#39;2013-08-03&amp;#39;,78),(2,3,&amp;#39;2013-07-22&amp;#39;,69);   We can easily query the rep, sales, and product data by joining the tables:</description>
    </item>
    
  </channel>
</rss>
