<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Taryn Pratt</title>
    <link>https://tarynpivots.com/tags/projects/</link>
    <description>Recent content in Projects on Taryn Pratt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Apr 2020 04:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tarynpivots.com/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Server 2019 Aggressive Clustered Columnstore Cleanup</title>
      <link>https://tarynpivots.com/post/aggressive-clustered-columnstore-cleanup/</link>
      <pubDate>Fri, 24 Apr 2020 04:00:00 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/aggressive-clustered-columnstore-cleanup/</guid>
      <description>In late March 2020, we upgraded our production SQL Servers to SQL Server 2019 with CU3. After finishing the upgrade, we hit an issue with clustered columnstore that we hadn&amp;rsquo;t experienced in the previous version of SQL, SQL Server 2017. The issue also wasn&amp;rsquo;t something we encountered during our extensive testing on various servers in development, which dated back to September 2019. The problem has been mitigated, but I wanted to share our experience.</description>
    </item>
    
    <item>
      <title>A gotcha when upgrading to SQL Server 2019</title>
      <link>https://tarynpivots.com/post/system-view-gotcha-with-sql-server-2019/</link>
      <pubDate>Fri, 21 Feb 2020 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/system-view-gotcha-with-sql-server-2019/</guid>
      <description>In my last post, I mentioned that I started the process of upgrading Stack Overflow to SQL Server 2019. This week I tackled our first production servers and after upgrading, we hit a small issue aka a gotcha because we were using an old system view. Below is a recap of what I encountered.
A Little Background The servers I upgraded were the three SQL Servers that run Stack Overflow for Teams.</description>
    </item>
    
    <item>
      <title>Recovering Lost Linked Servers</title>
      <link>https://tarynpivots.com/post/recovering-lost-linked-servers/</link>
      <pubDate>Thu, 06 Feb 2020 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/recovering-lost-linked-servers/</guid>
      <description>Recently, I kicked off a project to start moving us to SQL Server 2019. During my initial review of our servers, I found quite a few (9 total) that were still running on Windows Server 2012 R2. This meant that I would need to upgrade the operating system and move us to SQL Server 2019. Having completed plenty of SQL Server upgrades, as well as operating system upgrades, I couldn&amp;rsquo;t possibly make a mistake, right?</description>
    </item>
    
    <item>
      <title>How Stack Overflow upgraded from Windows Server 2012</title>
      <link>https://tarynpivots.com/post/how-stack-overflow-upgraded-from-windows-2012/</link>
      <pubDate>Thu, 18 Jul 2019 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-stack-overflow-upgraded-from-windows-2012/</guid>
      <description>Warning: This post is long. While working through this massive server upgrade/migration process, tears were shed, many cuss words were said, along with a general feeling of frustration, which ultimately culminated into extreme happiness once the migration was completed. The scale and complexity of the implementation factor into the length of this post, and Iâ€™ll share my thought process on how this was executed, so here goes.
Last year, when we upgraded to SQL Server 2017 we didn&amp;rsquo;t make any changes to the operating system on our main production servers.</description>
    </item>
    
    <item>
      <title>How we upgraded Stack Overflow to SQL Server 2017</title>
      <link>https://tarynpivots.com/post/how-we-upgraded-stackoverflow-to-sql-server-2017/</link>
      <pubDate>Wed, 07 Nov 2018 19:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-we-upgraded-stackoverflow-to-sql-server-2017/</guid>
      <description>This post has been rattling around in my head for months, and with SQL Server 2019 on the horizon, I figured I&amp;rsquo;d finally put my thoughts down, especially since I know we might hit some of the same issues when we upgrade.
A quick background, when I became the DBA at Stack Overflow, we had various versions of SQL Server in place &amp;mdash; the majority were at some level of SQL Server 2016, each with a different CU or SP installed.</description>
    </item>
    
    <item>
      <title>Using powershell to fix server space issues</title>
      <link>https://tarynpivots.com/post/using-powershell-to-fix-server-space-issues/</link>
      <pubDate>Sun, 12 Apr 2015 18:30:08 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/using-powershell-to-fix-server-space-issues/</guid>
      <description>A few weeks ago, we were running into severe disk space and memory issues on our development servers at work. Our set-up is a bit odd, we have 3 servers - one for the transactions, one for the web interface, and the final one for reporting. Using transactional replication we have databases that can exist on all 3 servers. Yes, it&amp;rsquo;s can be a real nightmare to maintain, but anyone who works with replication already knows this.</description>
    </item>
    
  </channel>
</rss>