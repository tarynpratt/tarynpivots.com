<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>failover on Taryn Pratt - Pivots and other SQL fun</title>
    <link>https://tarynpivots.com/tags/failover/</link>
    <description>Recent content in failover on Taryn Pratt - Pivots and other SQL fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Apr 2020 04:00:00 +0000</lastBuildDate><atom:link href="https://tarynpivots.com/tags/failover/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Server 2019 Aggressive Clustered Columnstore Cleanup</title>
      <link>https://tarynpivots.com/post/aggressive-clustered-columnstore-cleanup/</link>
      <pubDate>Fri, 24 Apr 2020 04:00:00 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/aggressive-clustered-columnstore-cleanup/</guid>
      <description>In late March 2020, we upgraded our production SQL Servers to SQL Server 2019with CU3. After finishing the upgrade, we hit an issue with clustered columnstorethat we hadn&amp;rsquo;t experienced in the previous version of SQL, SQL Server 2017. The issue also wasn&amp;rsquo;t something we encountered during our extensive testing on various servers in development, which dated back to September 2019. The problem has been mitigated, but I wanted to share our experience.</description>
    </item>
    
    <item>
      <title>How Stack Overflow upgraded from Windows Server 2012</title>
      <link>https://tarynpivots.com/post/how-stack-overflow-upgraded-from-windows-2012/</link>
      <pubDate>Thu, 18 Jul 2019 06:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-stack-overflow-upgraded-from-windows-2012/</guid>
      <description>Warning: This post is long. While working through this massive server upgrade/migration process, tears were shed, many cuss words were said, along with a general feeling of frustration, which ultimately culminated into extreme happiness once the migration was completed. The scale and complexity of the implementation factor into the length of this post, and I’ll share my thought process on how this was executed, so here goes.
Last year, when we upgraded to SQL Server 2017 we didn&amp;rsquo;t make any changes to the operating system on our main production servers.</description>
    </item>
    
    <item>
      <title>How we upgraded Stack Overflow to SQL Server 2017</title>
      <link>https://tarynpivots.com/post/how-we-upgraded-stackoverflow-to-sql-server-2017/</link>
      <pubDate>Wed, 07 Nov 2018 19:00:38 +0000</pubDate>
      
      <guid>https://tarynpivots.com/post/how-we-upgraded-stackoverflow-to-sql-server-2017/</guid>
      <description>This post has been rattling around in my head for months, and with SQL Server 2019on the horizon, I figured I&amp;rsquo;d finally put my thoughts down, especially since I know we might hit some of the same issues when we upgrade.
A quick background, when I became the DBA at Stack Overflow, we had various versions of SQL Server in place — the majority were at some level of SQL Server 2016, each with a different CU or SP installed.</description>
    </item>
    
  </channel>
</rss>
